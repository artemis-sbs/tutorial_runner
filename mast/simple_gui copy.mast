======= testr  ===============
#do gui_section("area:25,20,80,95;")
""""""" Example Gui """""""""""
await gui


"""
#
# Show the proper GUI for server vs Client Consoles
#
shared skills = ~~{
        "sensors": {
            "description": "This is the stuff that ",
            "tier": [ {
                "skills": [
                    {
                        "icon": 10,
                        "name": "Something",
                        "description": "This is some sensor skill",
                        "rank": [
                            {
                                "text": "Do this 5 times",
                                "description": "You did somethings that get you to a rank 1",
                                "goal": 5
                            },
                            {
                                "text": "Do another thing 50 times",
                                "description": "You did somethings that get you to a rank 2",
                                "goal": 50
                            }, 
                            {
                                "text": "Do another thing 10 times",
                                "description": "You did somethings that get you to a rank 3",
                                "goal": 10
                            
                            },
                            {
                                "text": "Do another thing 1 time",
                                "description": "You did somethings that get you to a rank 4",
                                "goal": 1
                            }
                        ]
                    }
                ]

            }]
            
        },
        "weapons": {
            "icons": [2]
        },
        "engines": {
            "icons": [3]
        },
       "shields": {
            "icons": [3]
        }
}~~
tab = "sensors"
shared skills_built = False
shared s_count = 0  # for update example

=========start=======
shared colors =["yellow", "red", "green", "blue", "purple", "cyan", "black", "#FF00FE", "gray"]
shared fonts = ["smallest", "gui-1", "gui-2", "gui-3", "gui-4", "gui-5", "gui-6"]
shared face_list = [random_terran(), random_terran_female(),random_terran_male(),random_terran_fluid() ]

shared recruits = ~~[
    "Pat:^^Can helm a ship through the toughest of asteroid belts",
    "Gwen:^^A real sharpshooter",
    "Randle:^^Top notch no nonsense scientist",
    "Steve:^^Just out of Detocs. Barely an engineer"
    ]~~


======= menu  ===============
do gui_section(style="area:25,20,80,95;")
""""""" Example Gui """""""""""
await gui


do gui_section( style="area:0,5,10,95;row-height:35px;")

button "Text":
    jump show_text
end_button
do gui_row()

button "Buttons":
    jump show_button
end_button
do gui_row()
button "Checkbox":
    jump show_checkbox
end_button
do gui_row()
button "dropdown":
    jump show_dropdown
end_button
do gui_row()
button "Slider":
    jump show_slider
end_button
do gui_row()
button "Text Input":
    jump show_text_input
end_button
do gui_row()
button "Clickable":
    jump show_clickable
end_button
do gui_row()
button "Custom":
    simulation create
    jump show_custom
end_button
do gui_row()
button "Table-ish":
    simulation create
    jump show_skills
end_button
do gui_row()
button "update":
    jump show_update
end_button
do gui_row()
do gui_section(style="area:25,20,80,95;")
""""""" Example Gui """""""""""
await gui

========= show_text =======

do gui_section( style="area:2,2,80,95;")

for i in range(len(fonts)):
    do gui_row()
    """color:{colors[i]};font:{fonts[i]};text: This is test"""
next i

await choice:
    + "menu":
        -> menu
end_await

========= show_update =======
count = 0
do gui_section(style="area:2,42,80,47;")


"""text: {count}""" style="tag:count-text;"
"""text: {count}""" style="tag:local-count-text;"
"""text: {s_count}""" style="tag:sh-count-text;"

button "Add":
    count += 1
    s_count += 1
    update tag "count-text" "text: {count}"
    update shared tag "local-count-text" "text: {count}"
    update shared tag "sh-count-text" "text: {s_count}"
end_button
do gui_row()
""" countdownÂ """ style="tag:countdown_tag;"
schedule count_down

do gui_section( style="area:2,2,80,35;")
"""
Update can but used to update control(s) without a complete repaint or new layout.
an update marked shared will update all clients.
With a shared update be careful to use a tag that is unique
The tag can be used on multiple clients on presenting different user interfaces, but the control/tag is common.
run this example on multiple clients. 
"""


await choice:
    + "menu":
        -> menu
end_await


===== count_down ===== 
# set the value 

for x in range(300):
    update tag "countdown_tag" "text: {300-x};"
    delay gui 1s
next x
# turn off
->END

========= show_button =======

do gui_section(style="area:2,20,80,95;")
for i in range(len(fonts)):
    do gui_row()
    button """color:{colors[i]};font:{fonts[i]};text: This is test""":
    end_button
next i


await choice:
    + "menu":
        -> menu
end_await

========= show_checkbox =======
check = False
do gui_section( style="area:2,20,80,95;")
for i in range(len(fonts)):
    do gui_row()
    checkbox check """color:{colors[i]};font:{fonts[i]};text: This is test;""" 
next i


await choice:
    + "menu":
        -> menu
end_await

========= show_dropdown =======
check = "test"
do gui_section(style="area:2,20,80,95;")


for i in range(len(fonts)):
    do gui_row()
    dropdown check """color:{colors[i]};font:{fonts[i]};text: This is test;list:Fred,Wilma,Betty,Barney""":
        #-> show_dropdown
    end_dropdown
next i


await choice:
    + "menu":
        -> menu
end_await


========= show_slider =======
check = 0.5
do gui_section( style="area:2,20,80,95;")


for i in range(len(fonts)):
    do gui_row()
    slider check """color:{colors[i]};font:{fonts[i]};low:0;high:2; show_number:no"""
    #slider check 0 2 0.5
next i


await choice:
    + "menu":
        -> menu
end_await


========= show_text_input =======
check = "text"
do gui_section( style="area:2,20,80,95;")


for i in range(len(fonts)):
    do gui_row()
    input check """color:{colors[i]};font:{fonts[i]}; desc: Description/title"""
next i


await choice:
    + "menu":
        -> menu
end_await


========= show_custom =======

ship_name = ""
ship_cur = None
do gui_section( style="area: 0, 0, 100,10;")
""" 
This is an example that shows custom gui controls.
Custom controls can be created in python.
"""

do gui_section( style="area: 1, 10, 45,100;")

do gui_row("row-height: 40px;")
do gui_hole()
input ship_name "desc: Ship Name;text: "
do gui_row("row-height: 50px;")
button "Add Ship":
    if len(ship_name) >0:
        do player_spawn(0,0,0, ship_name, "tsn", ship_type.value )

        ship_name = ""
        -> show_custom
    end_if
end_button
do gui_row(style="row-height: 300px;")
#pick ship ship_type

gui control ship_type ship_picker_control("Your Ship", ship_cur)

do gui_section( style="area: 50, 10, 100,100;")
do gui_row(style="row-height: 20px;")

"""Player Ships:"""

ships = to_object_list(role("__PLAYER__"))
do gui_row(style="row-height: 50;")
gui control ship_list list_box_control(ships, text=lambda ship: ship.comms_id, ship=lambda ship: ship.art_id)

await choice:
    + "menu":
        simulation create
        for ship in ships:
            do ship.destroyed()
        next ship
        -> menu
end_await


========= show_clickable =======
check = "text"

for x in range(len(recruits)):

do gui_section( style=f"area:10+x*20,20,25+x*20,65;click_color: blue; click_text:Recruit!; click_font:gui-5; click_tag:pick_{x}")

on click:
    pick = __CLICKED__.split("_")
    the_pick = int(pick[1].strip())
    -> show_recruit
end_on

do gui_face(face_list[x])
do gui_row()
"""color:cyan;font:gui-3; text:{recruits[x]}"""
next x


await choice:
    + "menu":
        -> menu
end_await

========= show_recruit =======

do gui_section( style="area:2,20,80,95;")
do gui_face(face_list[the_pick])
""" Ready for duty """

await choice:
    + "menu":
        -> menu
end_await





========= show_skills =======
push build_skills

do gui_section( style="area:0,0,100,30px;")
########### TABS
for t in skills:
    if t == tab:
        """justify:center; color:black;text:{t} """ style="background: #ffF;padding: 3px,3px,3px,3px;click_text: {t};click_tag: tab_{t};"
    else:
        """justify:center; color:white;text:{t} """ style="background: #0008;padding: 3px,3px,3px,3px;click_text: {t};click_tag: tab_{t};"
    end_if
next x

on click:
    clicked = __CLICKED__.split("_")
    click_type = clicked[0].strip().lower()
    click_value = clicked[1].strip().lower()
    if click_type == "tab":
        if tab != click_value:
            tab = click_value
            jump show_skills
        end_if
    elif click_type == "skill":
        view_category = tab
        view_tier = int(click_value)
        view_skill = int(clicked[2].strip())
        jump show_skill_details
    end_if
end_on

deez_category = skills.get(tab)
deez_tier = deez_category.get("tier")
# deez_skills = deez_tier[0].get("skills")

do gui_section( style="area:10,10,90,90;")
tier_colors = ["#9993", "#0FF3", "#FF03", "#f0f3", ]

do gui_row(style="background: #0f03;row-height:45px;padding: 0,0,0,3px;")
"""" justify: center; text:{tab} """"
tier = 0
for t in deez_tier:
    c = {tier_colors[tier]}
    do gui_row(style=f"background: {tier_colors[tier]};row-height:15;padding: 0,0,0,3px;")
    deez_skills = t.get("skills")
    skill = 0
    for sk in deez_skills:
        do gui_blank()
        i_i = sk.get("icon",0)
        do gui_icon(f"icon_index: {i_i}; color: white;", style=f"click_font: gui-5;click_color: blue;click_text: SKILL;click_tag: skill_{tier}_{skill};")
        skill += 1
    next ii
    do gui_blank()
    tier += 1
next t


await choice:
    + "menu":
        -> menu
end_await



========= show_skill_details =======


deez_category = skills.get(view_category)
deez_tier = deez_category.get("tier")
deez_skills = deez_tier[view_tier].get("skills")
deez_skill = deez_skills[view_skill]


do gui_section( style="area:10,10,90,10+45px;")
do gui_row(style="background: #0f03;row-height:45px;padding: 0,0,0,3px;")
"""" justify: center; text:{deez_skill["name"]} """"
do gui_row(style="background: #fff3;row-height:45px;padding: 0,0,0,3px;")
"""" justify: left; text:{deez_skill["description"]} """"

do gui_section( style="area:10,10+100px,50-3px,90;")
do gui_row(style="background: #0003; padding: 0,0,0,3px; ")
do gui_icon(f"""icon_index: {deez_skill["icon"]}; color: white;""" )
do gui_row(style="background: #0003; padding: 0,0,0,3px; ")
""" justify: left;text: challenge progress;"""
#
# This should be the goal of the 'next' rank
# 
""" justify: right;text: [0/5];"""

do gui_section( style="area:50+3px,10+100px,90,90;")
rank = 0
for t in deez_skill.get("rank", []):
    if rank == 0:
        do gui_row(style="background: #0ff3; row-height:15;padding: 0,0,0,3px;")
    else:
        do gui_row(style="background: #0003; row-height:15;padding: 0,0,0,3px;")
    end_if
    """ RANK {rank+1}

  {t.get("text", "")}
  {t.get("description", "")}
"""
    rank += 1
next t

#
# styleized Back button
#
do gui_row( style="row-height:45px;padding: 0,0,0,3px;")
"""justify:center; color:black;text:back;""" style="background: #fff8;padding: 3px,3px,3px,3px;click_text:back;click_tag:back;"

on click:
    if __CLICKED__ == "back":
        jump show_skills
    end_if
end_on


await choice:
    + "menu":
        -> menu
end_await


====== build_skills ====== 

# Do this just once
pop if skills_built
skills_built = True

rnd_icons = random.sample(range(140), k=4*(16))

skill = ~~{
    "icon": 10,
    "name": "Something",
    "description": "This is some sensor skill",
    "rank": [
        {
            "text": "Do this 5 times",
            "description": "You did somethings that get you to a rank 1",
            "goal": 5
        },
        {
            "text": "Do another thing 50 times",
            "description": "You did somethings that get you to a rank 2",
            "goal": 50
        }, 
        {
            "text": "Do another thing 10 times",
            "description": "You did somethings that get you to a rank 3",
            "goal": 10
        
        },
        {
            "text": "Do another thing 1 time",
            "description": "You did somethings that get you to a rank 4",
            "goal": 1
        }
    ]
}
~~
icon_index = 0
for k in skills:
    deez_category=skills.get(k)
    do deez_category["tier"] = []
    deez_tier = deez_category["tier"]
    
    for t in range(4):
        deez_skills = []
        #
        # 5,3,5,3
        #
        skill_count = 5 - (t%2)*2
        for sk in range(skill_count):
            do skill["icon"] = rnd_icons[icon_index]
            do deez_skills.append(skill)
            icon_index += 1

                        skill = ~~{
                            "icon": 10,
                            "name": "Something",
                            "description": "This is some sensor skill",
                            "rank": [
                                {
                                    "text": "Do this 5 times",
                                    "description": "You did somethings that get you to a rank 1",
                                    "goal": 5
                                },
                                {
                                    "text": "Do another thing 50 times",
                                    "description": "You did somethings that get you to a rank 2",
                                    "goal": 50
                                }, 
                                {
                                    "text": "Do another thing 10 times",
                                    "description": "You did somethings that get you to a rank 3",
                                    "goal": 10
                                
                                },
                                {
                                    "text": "Do another thing 1 time",
                                    "description": "You did somethings that get you to a rank 4",
                                    "goal": 1
                                }
                            ]
                        }
                        ~~

        next sk
        tier = {"skills": deez_skills}
        do deez_tier.append(tier)    
    next t

next k


pop
