#
# Show the proper GUI for server vs Client Consoles
#
# uncomment to see log messages
#logger

#
# A good place to setup AI is in the Spawn task
# A spawn task is run soon after the object is spawned
#
route spawn route_ai
#
# Show that multiple routes can be made
route spawn route_station
route change console select_console

if IS_SERVER:
    start_text = "This is a start project for mast"
    ->server_main
else:
    -> client_main
end_if


======= server_main =====


#
# Create the player ship so the clients see it
# This is a simple script that has one playable ship
#
simulation create


shared artemis =  to_id(player_spawn(0,0,0, "Artemis", "tsn", "tsn_battle_cruiser"))
do assign_client_to_ship(0,artemis)

do gui_section(style="area:2,20,80,35;")

""" {start_text}"""

await choice:
    + "Start":
        -> start
    end_await
-> server_main


======= win_server_main =====

do gui_section(style="area:2,20,80,35;")

""" WINNER """

await choice:
    + "restart":
        -> server_main
end_await

======= lose_server_main =====

do gui_section(style="area:2,20,80,35;")

""" LOSER """

await choice:
    + "restart":
        ->server_main
end_await


===== end_game =======
# 
# Check for end game
#
# no more players
players = role("__PLAYER__")
if len(players) == 0:
    start_text = "You lost"
    simulation pause
    reroute server lose_server_main
    reroute clients select_console
    ->END
end_if
#
# No more enemies
#
raiders = role("raider")
if len(raiders) == 0:
    start_text = "You won"
    simulation pause
    reroute server win_server_main
    reroute clients select_console
    ->END
end_if
delay sim 5s
-> end_game

======== start ======

# Create the world here

# Create a space station
ds1 = npc_spawn(1000,0,1000, "DS1", "tsn", "starbase_command", "behav_station")
ds2 = npc_spawn(1000,0,-1000, "DS2", "tsn", "starbase_command", "behav_station")
do add_role({ds1.id, ds2.id}, "Station")


simulation resume
reroute clients opening_scene
#schedule end_game
delay gui 99m


====== client_main =======

#
# Default the console to helm
#
console_select = "helm"
console_accepted = False
credits_ran = False

====== select_console ======

do gui_section(style="area:2,20,80,35;")

"""Select your console"""

do gui_section(style="area: 85,50, 99,90;")
do gui_vradio("helm,weapons, comms,science,engineering,mainscreen", var="console_select")
do gui_blank()
do gui_row()

if credits_ran:
    on message gui_button("accept"):
        jump run_console
    end_on
else:
    do gui_checkbox("accept", var="console_accepted")
end_if

await gui
->END

====== opening_scene ====

# Create an chase camera
cambot = npc_spawn(-1000,100,1200, "cam", "camera", "invisible", "behav_npcship")
camera_id = to_id(cambot)

#do sbs.assign_client_to_ship(client_id, camera_id)
do sbs.set_main_view_modes(client_id, "3dview", "front", "tracking")

pirate = npc_spawn(-1000,0,900, "Wolf", "raider", "pirate_strongbow", "behav_npcship")
pirate_eo = pirate.engine_object
pirate = pirate.id
do cambot.blob.set("camera_target_UID", pirate)

do sbs.add_particle_emittor(pirate_eo, -1, "align:True; smoke:True; shape:hull; color:black; lifespan:60; image_cell:4; size:12; speed: 0; count:50")
emittorID = sbs.add_particle_emittor(pirate_eo, -1, "align:True; shape:hull; color:purple,pink; lifespan:5; image_cell:0,3; size:20; speed: 0; count:50")
do sbs.assign_client_to_ship(client_id, camera_id)


##############
## Avoiding bug, 3d view will crash without delay
#delay sim 1s

#
# Credits one
#
do gui_activate_console("credits")
do gui_section(style="area: 0, 0, 100, 100;")
do gui_layout_widget("3dview")
do sbs.assign_client_to_ship(client_id, camera_id)

do gui_section(style="area: 0, 65, 100, 100;")
"""font:gui-3; justify:center; text: The following was created using the Artemis Cosmos Engine^using the user extensible scripting capabilities.^Including this text"""
do gui_row()
"""font:gui-2; justify:center; text: Artemis Cosmos is Early Game Development. All is subject to change. """
await gui timeout 12s


#
# Credits two
#
do gui_activate_console("credits")
do gui_section(style="area: 0, 0, 100, 100;")
do gui_layout_widget("3dview")

do target_pos(camera_id, -1000,300,100) 
#do sim.reposition_space_object(cambot.engine_object, -1000,300,100) 
do cambot.blob.set("camera_target_UID", pirate)



await gui timeout 5s

do gui_activate_console("credits")
do gui_section(style="area: 0, 0, 100, 100;")
do gui_layout_widget("3dview")
await gui timeout 50s

credits_ran = True
if not console_accepted:
    jump select_console
end_if


========== run_console ========
do sbs.assign_client_to_ship(client_id, artemis)
do gui_console(console_select)
await gui

========== route_ai =========
#
# SPAWNED_ID is a special value of the ID of the thing spawned
#
if has_role(SPAWNED_ID, "raider"):
    jump npc_targeting_ai
end_if
#if not a raider end the task
->END


=====  npc_targeting_ai   =========

the_target = closest(SPAWNED_ID, role("__PLAYER__"), 2000)
if the_target is None:
    the_target = closest(SPAWNED_ID, role("Station"))
end_if
if the_target is not None:
    do target(SPAWNED_ID, the_target, True)
end_if

delay sim 5s
jump npc_targeting_ai


========== route_station =========

# Just an example to show multiple spawn routes

if has_role(SPAWNED_ID, "station"):
    log "Station"
end_if
->END
