
#
# Show the proper GUI for server vs Client Consoles
#

route science select handle_science
route spawn route_ai

if IS_SERVER:
    start_text = "This is a start project for mast"
    ->server_main
else:
    -> client_main
end_if


======= server_main =====

#
# Create the player ship so the clients see it
# This is a simple script that has one playable ship
#
simulation create
delay gui 1s
shared artemis =  to_id(player_spawn(0,0,0, "Artemis", "tsn", "tsn_battle_cruiser"))
do assign_client_to_ship(0,artemis)

section style="area:2,20,80,35;"

""" {start_text}"""

await choice:
    + "Start":
        schedule start
end_await
### This continues on to the next label

===== end_game =======
# 
# Check for end game
#
# no more players
players = role("__PLAYER__")
if len(players) == 0:
    start_text = "You lost"
    simulation pause
    -> server_main
end_if
#
# No more enemies
#
raiders = role("raider")
if len(raiders) == 0:
    start_text = "You won"
    simulation pause
    -> server_main
end_if
delay sim 5s
-> end_game

======== start ======
simulation resume
# Create the world here

# Create a space station
ds1 = npc_spawn(1000,0,1000, "DS1", "tsn", "starbase_command", "behav_station")
ds2 = npc_spawn(1000,0,-1000, "DS2", "tsn", "starbase_command", "behav_station")
do add_role({ds1.id, ds2.id}, "Station")

# Create an enemy
k001 = npc_spawn(-1000,0,1000, "K001", "raider", "kralien_dreadnaught", "behav_npcship")
k001 = npc_spawn(-1500,0,1000, "K002", "raider", "kralien_dreadnaught", "behav_npcship")
k001 = npc_spawn(-2000,0,1000, "K003", "raider", "kralien_dreadnaught", "behav_npcship")
->END

====== client_main =======
#
# Default the console to helm
#
console_select = "helm"

====== select_console ======

section style="area:2,20,80,35;"

"""Select your console"""

section style="area: 85,50, 99,90;"
vradio console_select "helm,weapons, comms,science,engineering"
blank
row

button "accept":
    ->console_selected
end_button

await gui
->END

====== console_selected ====
do assign_client_to_ship(client_id,artemis)
console console_select
await gui



====== handle_science =====
# 
# Avoid scheduling this multiple times
#
->END if has_link_to(SCIENCE_SELECTED_ID, "science", SCIENCE_ORIGIN_ID)
do link(SCIENCE_SELECTED_ID, "science", SCIENCE_ORIGIN_ID)

if has_role(SCIENCE_SELECTED_ID, "Station"):
    jump station_science
elif has_role(SCIENCE_SELECTED_ID, "raider"):
    jump raider_science
end_if
->END

========= station_science =======


await scan:
    + "scan":
        scan results "This is a friendly station"
    + "bio":
        scan results "Just a bunch of people"
    + "intl":
        scan results "The people seem smart enough"
end_await
do print ("Station scan done")
->END

====== raider_science  ===========


await scan:
    + "scan":
        scan results "Looks like some bad dudes"
    + "bio":
        scan results "Whew can smell travel through space?"
    + "intl":
        scan results "The have spaceships, but seem quite dumb"
end_await
do print ("Raider scan done")
->END

========== route_ai =========
#
# SPAWNED_ID is a special value of the ID of the thing spawned
#
if has_role(SPAWNED_ID, "raider"):
    jump npc_targeting_ai
end_if
#if not a raider end the task
->END


=====  npc_targeting_ai   =========

the_target = closest(SPAWNED_ID, role("__PLAYER__"), 2000)
if the_target is None:
    the_target = closest(SPAWNED_ID, role("Station"))
else:
    #
    # This is a 'sonar scan' that schedules science 
    # Since this is close enough the player gets a free scan
    #
    follow route science select the_target SPAWNED_ID
end_if

if the_target is not None:
    #
    # This skips having them shoot, but they still chase
    #
    do target(sim, SPAWNED_ID, the_target, False)
end_if

#do print(f"Task count  {len(mast_scheduler.tasks)}")

delay sim 5s
jump npc_targeting_ai
