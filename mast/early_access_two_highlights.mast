#
# Show the proper GUI for server vs Client Consoles
#
# uncomment to see log messages
#logger

start_text = "This is a project used to create the early access release two video"
route change console select_console
shared grid_data = load_json_data(get_mission_dir_filename("mast/grid_data.json"))

reroute server server_main
reroute clients run_console
# This is where damcons stuff starts
route grid spawn route_grid_spawn

shared artemis = None


======= server_main =====
#
# Create the player ship so the clients see it
# This is a simple script that has one playable ship
#
simulation create
delay gui 1s
shared artemis =  to_id(player_spawn(0,0,0, "Artemis", "tsn", "tsn_light_cruiser"))
do assign_client_to_ship(0,artemis)

do gui_section(style="area:2,20,80,35;")

""" {start_text}"""

await choice:
    + "Start":
        -> start
    end_await
-> server_main




======== start ======

simulation resume
await gui



====== run_console ====

on change artemis:
    jump game_started
end_on

""" waiting for mission start""""
await gui

====== game_started ====
#
# 
#
shared theme = {"silhouette": "#0F1F1F", "lines": "#2F4F4F", "nodes": "#778899", "lime":"springgreen",  "silver": "LightYellow", "dc": ["slateblue", "CadetBlue", "royalblue"], "dc_damage": ["LightCoral", "LightSalmon", "Salmon"], "damage": "Crimson"}
blob = to_blob(artemis)
#
# Setup theme
#
do blob.set("internal_color_ship_sillouette", theme["silhouette"],0)
do blob.set("internal_color_ship_lines", theme["lines"],0)
do blob.set("internal_color_ship_nodes", theme["nodes"],0)

go =  grid_spawn(artemis,  "DC1", "DC1xx", 4, 10, 80, "royalBlue", "#, narrator")
console_select = "engineering"
# what until ship is created


do assign_client_to_ship(client_id,artemis)
do gui_console(console_select)
await gui



======= route_grid_spawn ====== 

jump narration if has_role(SPAWNED_ID, "narrator")
jump wife if has_role(SPAWNED_ID, "wife")
jump system_weapon if has_role(SPAWNED_ID, "weapon")
jump system_engine if has_role(SPAWNED_ID, "engine")
jump system_sensor if has_role(SPAWNED_ID, "sensors")
jump system_shield if has_role(SPAWNED_ID, "shield")
jump other_room if has_role(SPAWNED_ID, "room")


->END

==== narration ==== 
do grid_short_status(SPAWNED_ID, f"Hello, we're damcons", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"We talk now!", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"We thought we'd tell you about...", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"the new Artemis: Cosmos early access update!", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"The player ships now feel...", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"Like a complete ship", "blue", 3)
delay sim 4s
#
# Show systems
#
push show_grid_items {"filter_color": "lime", "SPAWNED_ID": artemis}
delay sim 2s
do grid_short_status(SPAWNED_ID, f"These are systems", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"systems can vary for each ship", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"The amount of system rooms", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"affect the damage the ship can take", "blue", 3)
delay sim 4s

#
# Show rooms
#
push show_grid_items {"filter_color": "silver", "SPAWNED_ID": artemis}
delay sim 2s
do grid_short_status(SPAWNED_ID, f"The ships have other rooms", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"You will need to fix all damage", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"But systems should take priority", "blue", 3)
delay sim 4s



do grid_short_status(SPAWNED_ID, f"systems take heat damage", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"all rooms and hallways take internal damage", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"internal damage is directional", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"where the hull is hit...", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"is where damage occurs!", "blue", 3)
delay sim 4s
#
#
do grid_short_status(SPAWNED_ID, f"Engineering can enhance performance", "blue", 3)
delay sim 4s
#
# show sliders
#
do grid_short_status(SPAWNED_ID, f"gathering anomalies can help too", "blue", 3)
delay sim 4s
#
# show anomolies
#
do grid_short_status(SPAWNED_ID, f"future scripts will provide more ways", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"endless possibilities", "blue", 3)
delay sim 4s
#
#
#
do grid_short_status(SPAWNED_ID, f"rooms assign damcons work", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"like fixing damage", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"scripting can add other types of work", "blue", 3)
delay sim 4s

go =  grid_spawn(artemis,  "DC2", "DC2xx", 5, 14, 78, "purple", "#, wife")
delay sim 4s
do grid_target_pos(SPAWNED_ID, 8,5)
do grid_short_status(SPAWNED_ID, f"I should have gone to detocs", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"There's a lot more stuff", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"Enjoy the release", "blue", 3)
delay sim 4s
do grid_short_status(SPAWNED_ID, f"give us feedback!", "blue", 3)
->END


====== show_grid_items  =====

#
# Get the grid data
#
->END if grid_data is None
so = to_object(artemis)
->END if so is None
ship_grid  = grid_data.get(so.art_id)
->END if ship_grid is None
internal_items = ship_grid.get("grid_objects")
->END if internal_items is None


for g in internal_items:

    loc_x = int(g["x"])
    loc_y = int(g["y"])
    coords = f"{loc_x},{loc_y}"
    name_tag = f"{g['name']}:{coords}"
    color = g["color"]
    #
    # Just show systems
    #
    continue if color != filter_color
    color = theme[color]

    go =  grid_spawn(SPAWNED_ID,  name_tag, name_tag, loc_x, loc_y, g["icon"], color, g["roles"])
    do go.blob.set("icon_scale", g["scale"], 0)
next g

<<-

==== wife ==== 
do grid_short_status(SPAWNED_ID, f"harcourt!!", "red", 3)
do grid_target_pos(SPAWNED_ID, 4,10)
delay sim 4s

do grid_short_status(SPAWNED_ID, f"You've been drinking again", "red", 3)
delay sim 4s
->END


==== system_engine ====
if random.randrange(5)==3:
delay sim 2s
do grid_short_status(SPAWNED_ID, "Whosh", "blue", 3)
end_if
->END
==== system_weapon ==== 
if random.randrange(5)==3:
delay sim 2s
do grid_short_status(SPAWNED_ID, "Pew pew", "red", 3)
end_if
->END
==== system_sensor ==== 
if random.randrange(5)==3:
delay sim 2s
do grid_short_status(SPAWNED_ID, "scanning", "purple", 3)
end_if
->END
==== system_shield ==== 
if random.randrange(5)==3:
delay sim 2s
do grid_short_status(SPAWNED_ID, "I got you", "black", 3)
end_if
->END
==== other_room ==== 
if random.randrange(5)==3:
delay sim 2s
do grid_short_status(SPAWNED_ID, "Hello", "black", 3)
end_if
->END