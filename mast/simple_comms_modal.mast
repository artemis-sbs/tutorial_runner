#
# Show the proper GUI for server vs Client Consoles
#
# uncomment to see log messages
#logger

#
# This shows more complex interaction
# where a comms button changes the ui
# Simulating a modal dialog
#
route_comms_select("comms_route")

route_weapons_select("weapons_select_route")
#
route_change_console("select_console")

if IS_SERVER:
    start_text = "This is a start project for mast"
    ->server_main
else:
    -> client_main
end_if


======= server_main =====
#
# Create the player ship so the clients see it
# This is a simple script that has one playable ship
#
sim_create()
#delay gui 1s
shared artemis =  to_id(player_spawn(0,0,0, "Artemis", "tsn", "tsn_battle_cruiser"))
assign_client_to_ship(0,artemis)
set_face(artemis, random_terran())

gui_section(style="area:2,20,80,35;")

""" {start_text}"""

await choice:
    + "Start":
        -> start
end_await
-> server_main

======== start ======

# Create the world here

# Create a space station
shared ds1 = npc_spawn(1000,0,1000, "DS1", "tsn, Station", "starbase_command", "behav_station")
shared ds2 = npc_spawn(1000,0,-1000, "DS2", "tsn, Station", "starbase_command", "behav_station")
set_face(ds1.id, random_terran())
set_face(ds2.id, random_terran())

T001 = npc_spawn(-1000,0,-1000, "T001", "tsn, friendly", "tsn_battle_cruiser", "behav_npcship")
set_face(T001.id, random_terran())

# Create an enemy
k001 = npc_spawn(-1000,0,1000, "K001", "raider", "kralien_dreadnaught", "behav_npcship")
sim_resume()

await gui


====== client_main =======

#
# Default the console to helm
#
console_select = "helm"

====== select_console ======

gui_section(style="area:2,20,80,35;")

"""Select your console"""

gui_section(style="area: 85,50, 99,90;")
gui_vradio("helm,weapons, comms,science,engineering,mainscreen", var="console_select")
gui_blank()
gui_row()

on message gui_button("accept"):
    ->console_selected
end_on

await gui
->END

====== console_selected ====
assign_client_to_ship(client_id,artemis)
# Maybe this could also be set_inventory_value
set_inventory_value(client_id, "assigned_ship", artemis)

gui_console(console_select)
await gui


================ comms_route ==================
#
# This label is called for a player ship (COMMS_ORIGIN_ID)
# and the COMMS_SELECTED_ID ship has not been communicated with
# this is used to resolve where to START the conversation with the TO ship
#
# COMMS_SELECTED_ID is the id of the target

if COMMS_SELECTED_ID == COMMS_ORIGIN_ID:
    # This is the same ship
    jump internal_comms
elif has_roles(COMMS_SELECTED_ID, 'tsn, Station'):
    jump comms_station
elif has_role(COMMS_SELECTED_ID, 'tsn'):
    jump comms_friendly
elif has_role(COMMS_SELECTED_ID, 'raider'):
     jump npc_comms
end_if
# Anything else has no comms buttons
# and static as the id
comms_info "static"

->END


====== internal_comms =====
-> END


===== comms_station =======
station_face = get_face(COMMS_SELECTED_ID)
plot_point = get_inventory_value(COMMS_SELECTED_ID, "plot_point", 0)

await comms:
    + "Hail":
        reroute client client_id station_story_route
end_await
->  comms_station

===== comms_friendly =======
station_face = get_face(COMMS_SELECTED_ID)

await comms:
    + "Give Orders":
        reroute client client_id friendly_give_orders
end_await
->  comms_friendly


====== station_story_route ======
comms_selected = get_inventory_value(client_id, "COMMS_SELECTED_ID", 0)
plot_point = get_inventory_value(comms_selected, "plot_point", 0)
ship = get_inventory_value(client_id, "assigned_ship")
player = to_object(ship)
if player:
    player_name = player.name
else:
    player_name = "Terran"
end_if



match plot_point:
    case 0:
        jump station_story_start
    case 1:
        jump station_story_one
    case 2:
        jump station_story_two
end_match

===== show_comms_again ==== 
comms_console = "comms"
gui_console(comms_console)
await gui


==== station_story_start ======
comms_selected = get_inventory_value(client_id, "COMMS_SELECTED_ID", 0)
station_face = get_face(comms_selected)
gui_section(style="area:2,20,80,65;")

gui_face(station_face)
"""
text: Hello {player_name} we  have been waiting for you.
you have a choice to make
"""

await choice:
   + "Choose One":
      set_inventory_value(comms_selected, "first_choice", True)
   + "Choose Two":
      set_inventory_value(comms_selected, "first_choice", False)
   + "RETURN to CONSOLE":
        jump console_selected
end_await


====== station_story_one ====
comms_selected = get_inventory_value(client_id, "COMMS_SELECTED_ID", 0)
station_face = get_face(comms_selected)
set_inventory_value(comms_selected, "plot_point", 1)

gui_face(station_face)
"""
Hello {player_name} I will remember that.
But how would you choose this.
"""


await choice:
   + "Choose One":
      set_inventory_value(comms_selected, "second_choice", True)
   + "Choose Two":
      set_inventory_value(comms_selected, "second_choice", False)
   + "RETURN to CONSOLE":
        jump console_selected
end_await


====== station_story_two ====
comms_selected = get_inventory_value(client_id, "COMMS_SELECTED_ID", 0)
station_face = get_face(comms_selected)
set_inventory_value(comms_selected, "plot_point", 2)
first = get_inventory_value(comms_selected, "first_choice", False)
second = get_inventory_value(comms_selected, "second_choice", False)
first =  "One" if first else "Two"
second =  "One" if second else "Two"


gui_face(station_face)
"""
Hello {player_name} you've made your choices.
I remember them:
    First {first}
    second {second}
"""

await choice:
   + "RETURN to CONSOLE":
        jump console_selected
end_await



==== friendly_give_orders ======
comms_selected = get_inventory_value(client_id, "COMMS_SELECTED_ID", 0)
station_face = get_face(comms_selected)
gui_section(style="area:2,20,80,65;")
ship = get_inventory_value(client_id, "assigned_ship")
player = to_object(ship)
if player:
    player_name = player.name
else:
    player_name = "Terran"
end_if
#
# Switch to the friendly ship
#
assign_client_to_ship(client_id,comms_selected)
#
# Make a limit weapons console
#
gui_activate_console("weapons")
gui_section(style="area: 0, 4, 80, 80;")
gui_layout_widget("2dview")
        
gui_section(style="area: 80, 4, 100, 80;")
gui_face(station_face)
gui_row()
"""
text: Hello {player_name} tell us what to do
"""

#
# The selection will be made in parallel
# and set in inventory
#
await choice:
   + "APPLY":
        target_id = get_inventory_value(comms_selected, "WEAPONS_SELECTED_ID", None)
        target_point = get_inventory_value(comms_selected, "WEAPONS_SELECTED_POINT", None)
        if target_id:
            target(sim, comms_selected, target_id, True)
        else:
            target_pos(sim, comms_selected, target_point.x, target_point.y, target_point.z )
        end_if
   + "CANCEL":
        jump console_selected
end_await

#
# Get back on the right ship
#
assign_client_to_ship(client_id,ship)
jump console_selected



====== npc_comms =========
-> END


========== weapons_select_route ========
#
# Handles the 2dView selection for friendlies
#
->END if not has_role(WEAPONS_ORIGIN_ID, "friendly")

nav = get_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_NAV", None)
if nav:
    sim.delete_navpoint_by_reference(nav)
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_NAV", None)
end_if
# Handle initial clicks
if EVENT.selected_id != 0:
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_POINT", None)
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_ID", EVENT.selected_id)
else:
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_POINT", EVENT.source_point)
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_ID", None)
    
    nav = sim.add_navpoint(EVENT.source_point.x,EVENT.source_point.y, EVENT.source_point.z, "goto", "white")
    nav.visibleToShip =WEAPONS_ORIGIN_ID
    set_inventory_value(WEAPONS_ORIGIN_ID, "WEAPONS_SELECTED_NAV", nav)
end_if
#Done no point running more
->END

